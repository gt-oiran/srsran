#
# Copyright 2013-2024 Software Radio Systems Limited
#
# By using this file, you agree to the terms and conditions set
# forth in the LICENSE file which can be found at the top level of
# the distribution.
#

include:
  - project: softwareradiosystems/ci/tools
    ref: "20"
    file: .gitlab/ci-shared/setup/all.yml
  - project: softwareradiosystems/ci/tools
    ref: "20"
    file: .gitlab/ci-shared/features/all.yml

stages:
  - private
  - public
  - release

.my-rules:
  script:
    - &on_public_push $CI_COMMIT_TAG =~ /^\d{4}\.\d{2}\.\d{2}$/
    - &on_public_release $CI_COMMIT_TAG =~ /^\d{2}\.\d{2}$/
    - &on_custom_push $CI_COMMIT_TAG =~ /^\w+_\d{4}\.\d{2}\.\d{2}$/

################################################################################
# Load variables
################################################################################
load release variables:
  stage: .pre
  image: ubuntu:24.04
  rules:
    - if: *on_public_push
    - if: *on_public_release
    - if: *on_custom_push
  variables:
    GIT_STRATEGY: none
  script:
    - |
      if [[ $CI_COMMIT_TAG =~ ^([a-zA-Z0-9_]+)_([0-9]{4})\.([0-9]{2})\.([0-9]{2})$ ]]; then
        KEY="${BASH_REMATCH[1]}"
        echo "PRIVATE_BRANCH=dev_$KEY" >> repo.env      
        echo "PUBLIC_NAME=srsRAN $KEY" >> repo.env
        echo "PUBLIC_REPO=softwareradiosystems/srsRAN_$KEY" >> repo.env
        echo "HEADERS=" >> repo.env
        echo "PUBLIC_BRANCH=main" >> repo.env
        TOKEN_VAR_NAME="PUBLIC_${KEY}_TOKEN"
        echo "PUBLIC_PUSH_TOKEN=${!TOKEN_VAR_NAME}" >> repo.env
      else
        echo "PRIVATE_BRANCH=agpl_main" >> repo.env
        echo "PUBLIC_NAME=srsRAN Project" >> repo.env
        echo "PUBLIC_REPO=srsran/srsRAN_Project" >> repo.env
        echo "HEADERS=true" >> repo.env
        echo "PUBLIC_PUSH_TOKEN=$PUBLIC_TOKEN" >> repo.env
      fi
    - cat repo.env
  artifacts:
    reports:
      dotenv: repo.env

################################################################################
# Update private branches
################################################################################

update private branch:
  stage: private
  interruptible: false
  variables:
    GIT_STRATEGY: none
    PRIVATE_BRANCH: ""
    HEADERS: ""
    MODE: "push"
  image: ubuntu:24.04
  rules:
    - if: *on_public_push
    - if: *on_public_release
    - if: *on_custom_push
  before_script:
    - DEBIAN_FRONTEND=noninteractive apt-get update && apt-get install -y --no-install-recommends git git-lfs apt-transport-https ca-certificates
    - git lfs install
    - git lfs uninstall || true
    # Extra LFS filters for OS (like Ubuntu) where 'git lfs uninstall' has no effect
    - git config --global filter.lfs.smudge "git-lfs smudge --skip -- %f"
    - git config --global filter.lfs.process "git-lfs filter-process --skip"
    - git config --global user.name "${CODEBOT_USERNAME}"
    - git config --global user.email "${CODEBOT_LONG_USERNAME}@noreply.gitlab.com"
  script:
    - git clone https://${CODEBOT_USERNAME}:${CODEBOT_TOKEN}@gitlab.com/${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}.git /${CI_PROJECT_NAME}
    - cd /${CI_PROJECT_NAME}
    - git fetch -q origin ${CI_COMMIT_SHA} && git checkout ${CI_COMMIT_SHA}
    - .gitlab/ci/release/auto_merge.sh ${CI_COMMIT_SHA} ${PRIVATE_BRANCH}
    - |
      if [ "$HEADERS" = "true" ]; then
        .gitlab/ci/release/update_headers.sh
        git commit -a --amend --no-edit
      fi
    - |
      if [ "$MODE" = "push" ]; then
        git push origin "${PRIVATE_BRANCH}"
      fi
  needs: &release-var-needs
    - job: "load release variables"
      artifacts: true

generate testvector tar gz:
  stage: private
  rules:
    - if: *on_public_release
  interruptible: false
  image: ubuntu:24.04
  script:
    - find . -name "*.tar.gz" -exec tar -rvf phy_testvectors.tar {} \;
  artifacts:
    paths:
      - phy_testvectors.tar
    expire_in: "30 days"

# coverity-agpl:
#   extends: .coverity_base
#   stage: private
#   rules:
#     - if: *on_public_push
#     - if: *on_public_release
#   variables:
#     GIT_STRATEGY: none
#     PRIVATE_BRANCH: ""
#   before_script:
#     - export PROJECT_NAME="srsRAN_5G_agpl"
#     - export DESCRIPTION="srsRAN Project AGPL build"
#     - export COV_TOKEN="${COVERITY_TOKEN_AGPL}"
#     # Download agpl branch
#     - git config --global user.name "${CODEBOT_USERNAME}"
#     - git config --global user.email "${CODEBOT_LONG_USERNAME}@noreply.gitlab.com"
#     - git clone --depth 1 --branch $PRIVATE_BRANCH https://${CODEBOT_USERNAME}:${CODEBOT_TOKEN}@gitlab.com/${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}.git /${CI_PROJECT_NAME}
#     - cd /${CI_PROJECT_NAME}
#   needs:
#     - *release-var-needs
#     - job: update private branch
#       optional: false
#       artifacts: false

################################################################################
# Publish
################################################################################

.publish:
  stage: public
  interruptible: false
  image: alpine:3.16.0 # sh entrypoint
  variables:
    GIT_STRATEGY: none
    PRIVATE_BRANCH: ""
    PUBLIC_REPO: ""
    PUBLIC_BRANCH: ""
  before_script:
    - apk add git git-lfs
    - git lfs install
    - git lfs uninstall || true
    - git config --global filter.lfs.smudge "git-lfs smudge --skip -- %f"
    - git config --global filter.lfs.process "git-lfs filter-process --skip"
  script:
    # Download private repo and add public as origin
    - git clone --branch $PRIVATE_BRANCH https://${CODEBOT_USERNAME}:${CODEBOT_TOKEN}@gitlab.com/${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}.git /${CI_PROJECT_NAME}
    - cd /${CI_PROJECT_NAME}
    - git remote add github_public https://${PUBLIC_PUSH_TOKEN}@github.com/${PUBLIC_REPO}.git
    # Push code to public repo
    - git push github_public ${PRIVATE_BRANCH}:${PUBLIC_BRANCH}

publish test:
  extends: .publish
  rules:
    - if: *on_public_push
    - if: *on_public_release
  when: manual
  allow_failure: false
  variables:
    PUBLIC_BRANCH: test
  needs:
    - *release-var-needs
    - job: update private branch
      optional: false
      artifacts: false

publish main:
  extends: .publish
  rules:
    - if: *on_public_push
    - if: *on_public_release
  when: manual
  allow_failure: false
  variables:
    PUBLIC_BRANCH: main
  needs:
    - *release-var-needs
    - job: publish test
      optional: false
      artifacts: false

publish public:
  extends: .publish
  rules:
    - if: *on_custom_push
  needs:
    - *release-var-needs
    - job: update private branch
      optional: false
      artifacts: true

notify branch published:
  extends: .notifier
  stage: public
  rules:
    - if: *on_public_push
    - if: *on_public_release
    - if: *on_custom_push
  needs:
    - *release-var-needs
    - job: publish main
      optional: true
      artifacts: true
    - job: publish public
      optional: true
      artifacts: true
  variables:
    CI_DESCRIPTION: "$PUBLIC_REPO GitHub Updated"
    MSG: "$PUBLIC_BRANCH branch has been updated."
    SLACK_CHANNEL: $SLACK_CHANNEL_OK
    LEVEL: "ok"

publish maltab:
  stage: public
  interruptible: false
  variables:
    CI_DESCRIPTION: Release
    NOTIFY_SLACK: "false"
  rules:
    - if: *on_public_push
    - if: *on_public_release
  needs:
    - job: publish main
  trigger:
    project: softwareradiosystems/srsgnb_matlab
    branch: master

################################################################################
# Release
################################################################################

release public:
  stage: release
  rules:
    - if: *on_public_release
  when: manual
  allow_failure: false
  interruptible: false
  image: alpine:3.16.0 # sh entrypoint
  needs:
    - *release-var-needs
    - job: publish main
      optional: false
      artifacts: false
    - job: generate testvector tar gz
      optional: false
      artifacts: true
  variables:
    GIT_STRATEGY: none
    ARTIFACT: phy_testvectors.tar
    PUBLIC_NAME: ""
    PUBLIC_REPO: ""
    PUBLIC_BRANCH: ""
  before_script:
    - apk add git curl jq
  script:
    # Expected private tag name: X.Y. Ex: 23.4
    # Public tag name: release_X_Y. Ex: release_23_4
    - export PUBLIC_TAG=release_${CI_COMMIT_TAG//./_}
    # Public release name: $PUBLIC_NAME X_Y. Ex: srsRAN Project 23.4
    - export PUBLIC_RELEASE_NAME="${PUBLIC_NAME} ${CI_COMMIT_TAG}"
    # Public release notes: tag message
    - export PUBLIC_RELEASE_NOTES=${CI_COMMIT_TAG_MESSAGE}

    # Download public repo
    - git clone --branch $PUBLIC_BRANCH https://${PUBLIC_PUSH_TOKEN}@github.com/${PUBLIC_REPO}.git srsran
    - cd srsran

    # Push tag
    - git tag ${PUBLIC_TAG} origin/${PUBLIC_BRANCH}
    - git push origin ${PUBLIC_TAG}

    # Create release
    - |
      RELEASE_ID=$(curl -L \
        -X POST \
        -H "Accept: application/vnd.github+json" \
        -H "Authorization: Bearer ${PUBLIC_PUSH_TOKEN}" \
        -H "X-GitHub-Api-Version: 2022-11-28" \
        https://api.github.com/repos/${PUBLIC_REPO}/releases \
        -d "{\"tag_name\":\"${PUBLIC_TAG}\",\"target_commitish\":\"${PUBLIC_BRANCH}\",\"name\":\"${PUBLIC_RELEASE_NAME}\",\"body\":\"${PUBLIC_RELEASE_NOTES}\",\"draft\":false,\"prerelease\":false,\"generate_release_notes\":false}" | jq '.id')

    # Push ${ARTIFACT} to release
    - |
      curl -L \
        -X POST \
        -H "Accept: application/vnd.github+json" \
        -H "Authorization: Bearer ${PUBLIC_PUSH_TOKEN}" \
        -H "X-GitHub-Api-Version: 2022-11-28" \
        -H "Content-Type: application/octet-stream" \
        https://uploads.github.com/repos/${PUBLIC_REPO}/releases/${RELEASE_ID}/assets?name=${ARTIFACT} \
        --data-binary "@${CI_PROJECT_DIR}/${ARTIFACT}"

notify release published:
  extends: .notifier
  stage: release
  rules:
    - if: *on_public_release
  needs:
    - *release-var-needs
    - job: release public
      optional: false
      artifacts: false
  variables:
    CI_DESCRIPTION: "Public Release created on GitHub"
    SLACK_CHANNEL: $SLACK_CHANNEL_OK
    LEVEL: "ok"
  before_script:
    - MSG="release_${CI_COMMIT_TAG//./_} created"
