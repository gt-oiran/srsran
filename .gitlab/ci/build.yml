#
# Copyright 2013-2024 Software Radio Systems Limited
#
# By using this file, you agree to the terms and conditions set
# forth in the LICENSE file which can be found at the top level of
# the distribution.
#

include:
  - project: softwareradiosystems/ci/srsran_project_packaging
    ref: "7"
    file: .gitlab/ci-shared/package.yml
  - local: .gitlab/ci-shared/build.yml

variables:
  TEST_MODE:
    description: What tests to run. None won't run any test at all.
    options:
      - "default"
      - "coverage"
      - "tsan"
      - "valgrind"
      - "none"
    value: "default"
  SRSRANDIR: ${CI_PROJECT_DIR}

################
# Build caches #
################

.cache_build_set: &cache_build_set
  - key: ${OS}-${COMPILER}-${BUILD_TYPE}-${MARCH}
    paths: [ccache]
    policy: push

.cache_build_get: &cache_build_get
  - key: ${OS}-${COMPILER}-${BUILD_TYPE}-${MARCH}
    paths: [ccache]
    policy: pull-push

#################
# Template jobs #
#################

# Base job

.build_and_unit:
  extends: .build_and_unit_template
  stage: build and unit tests
  variables:
    BUILD_TYPE: "" # Empty for cmake default
    ASSERT_LEVEL: "" # Empty for cmake default
    ENABLE_EXPORT: "" # Empty for cmake default
    ENABLE_FFTW: "" # Empty for cmake default
    ENABLE_UHD: "" # Empty for cmake default
    ENABLE_DPDK: "" # Empty for cmake default
    ENABLE_ZEROMQ: "True" # Empty for cmake default
    ENABLE_ASAN: "" # Empty for cmake default
    ENABLE_TSAN: "" # Empty for cmake default
    ENABLE_GCOV: "" # Empty for cmake default
    ENABLE_WERROR: "" # Empty for cmake default
    FORCE_DEBUG_INFO: "" # Empty for cmake default
    MARCH: ""
    MTUNE: ""
  needs:
    - job: builder version
      optional: false
      artifacts: true
    - job: trigger builder
      optional: true
      artifacts: false
  script:
    - &srs_functions |
      CMAKE_FLAGS_CMD=""
      if [ -n "${BUILD_TYPE}" ]; then
        CMAKE_FLAGS_CMD="${CMAKE_FLAGS_CMD} -DCMAKE_BUILD_TYPE=${BUILD_TYPE}"
      fi
      if [ -n "${ASSERT_LEVEL}" ]; then
        CMAKE_FLAGS_CMD="${CMAKE_FLAGS_CMD} -DASSERT_LEVEL=${ASSERT_LEVEL}"
      fi
      if [ -n "${ENABLE_EXPORT}" ]; then
        CMAKE_FLAGS_CMD="${CMAKE_FLAGS_CMD} -DENABLE_EXPORT=${ENABLE_EXPORT}"
      fi
      if [ -n "${ENABLE_FFTW}" ]; then
        CMAKE_FLAGS_CMD="${CMAKE_FLAGS_CMD} -DENABLE_FFTW=${ENABLE_FFTW}"
      fi
      if [ -n "${ENABLE_UHD}" ]; then
        CMAKE_FLAGS_CMD="${CMAKE_FLAGS_CMD} -DENABLE_UHD=${ENABLE_UHD}"
      fi
      if [ -n "${ENABLE_DPDK}" ]; then
        CMAKE_FLAGS_CMD="${CMAKE_FLAGS_CMD} -DENABLE_DPDK=${ENABLE_DPDK}"
      fi
      if [ -n "${ENABLE_ZEROMQ}" ]; then
        CMAKE_FLAGS_CMD="${CMAKE_FLAGS_CMD} -DENABLE_ZEROMQ=${ENABLE_ZEROMQ}"
      fi
      if [ -n "${ENABLE_ASAN}" ]; then
        CMAKE_FLAGS_CMD="${CMAKE_FLAGS_CMD} -DENABLE_ASAN=${ENABLE_ASAN}"
      fi
      if [ -n "${ENABLE_TSAN}" ]; then
        CMAKE_FLAGS_CMD="${CMAKE_FLAGS_CMD} -DENABLE_TSAN=${ENABLE_TSAN}"
      fi
      if [ -n "${ENABLE_GCOV}" ]; then
        CMAKE_FLAGS_CMD="${CMAKE_FLAGS_CMD} -DENABLE_GCOV=${ENABLE_GCOV}"
      fi
      if [ -n "${MARCH}" ]; then
        CMAKE_FLAGS_CMD="${CMAKE_FLAGS_CMD} -DMARCH=${MARCH}"
      fi
      if [ -n "${MTUNE}" ]; then
        CMAKE_FLAGS_CMD="${CMAKE_FLAGS_CMD} -DTUNE=${MTUNE}"
      fi
      if [ -n "${ENABLE_WERROR}" ]; then
        CMAKE_FLAGS_CMD="${CMAKE_FLAGS_CMD} -DENABLE_WERROR=${ENABLE_WERROR}"
      fi
      if [ -n "${FORCE_DEBUG_INFO}" ]; then
        CMAKE_FLAGS_CMD="${CMAKE_FLAGS_CMD} -DFORCE_DEBUG_INFO=${FORCE_DEBUG_INFO}"
      fi
      if [[ $TEST_MODE = "none" ]]; then
        CMAKE_FLAGS_CMD="${CMAKE_FLAGS_CMD} -DBUILD_TESTS=False"
      fi

      echo "INFRASTRUCTURE_TAG=${INFRASTRUCTURE_TAG}"
      echo "OS=${OS}"
      echo "COMPILER=${COMPILER}"
      echo "TEST_MODE=${TEST_MODE}"
      echo "BUILD_ARGS=${CMAKE_FLAGS_CMD} ${BUILD_ARGS}"
      echo "MAKE_ARGS=${MAKE_ARGS}"
      echo "UHD_VERSION=${UHD_VERSION}"
      echo "DPDK_VERSION=${DPDK_VERSION}"

      build_srsgnb() {
        start_time=$(date +%s)
        if [ -e "/usr/local/bin/ram_reporter.py" ]; then
          /usr/local/builder_tools/bin/python3 /usr/local/bin/ram_reporter.py ${CI_PROJECT_DIR}/ram_usage.txt &
          ram_reporter_pid=$!
        fi

        build_srsran "" ${CMAKE_FLAGS_CMD}
        if [[ -n "$OUTPUT_FINGERPRINT" ]]; then
          echo "Storing fingerprints of all executables to $OUTPUT_FINGERPRINT"
          cd build
          /usr/local/builder_tools/bin/python /usr/local/bin/changed_tests.py -b . -o "../$OUTPUT_FINGERPRINT"
          cd ..
        fi

        end_time=$(date +%s)
        execution_time=$((end_time - start_time))
        echo "Build time is: $execution_time seconds"

        export metric_prefix=""
        if [[ $ON_MR == "true" ]]; then metric_prefix="_pr"; fi

        if [ -e "${CI_PROJECT_DIR}/ram_usage.txt" ]; then
          ram_usage=$(cat ${CI_PROJECT_DIR}/ram_usage.txt)
          echo "RAM usage is: $ram_usage GB"
          kill $ram_reporter_pid
          echo "ram_usage${metric_prefix},pipeline=${CI_PIPELINE_ID},os=${OS} value=${ram_usage}" >> ${CI_PROJECT_DIR}/build/build_time_metrics.txt
        fi
        echo "build_time${metric_prefix},pipeline=${CI_PIPELINE_ID},os=${OS} value=${execution_time}" >> ${CI_PROJECT_DIR}/build/build_time_metrics.txt
      }

      launch_tests() {
        cd ${CI_PROJECT_DIR}/build
        case $TEST_MODE in
          none)
            echo "Tests skipped"
            exit 0
            ;;
          tsan)
            ctest_extra="-L tsan"
            ;;
          valgrind)
            G_DEBUG=gc-friendly G_SLICE=always-malloc
            # Default timeout per test is 1500 (25 min)
            export CTEST_TIMEOUT=3600
            export CTEST_TEST_TIMEOUT=${CTEST_TIMEOUT}
            ctest_extra="-T memcheck -LE NO_MEMCHECK --timeout ${CTEST_TIMEOUT}"
            ;;
        esac
        if [ -n "${FINGERPRINT}" ]; then
          echo "Searching for changed tests"
          CTEST_SUBSET=$(/usr/local/builder_tools/bin/python /usr/local/bin/changed_tests.py -b . -i "../${FINGERPRINT}" -d md5)
          if [ -n "${CTEST_SUBSET}" ]; then
            echo "Tests with changed fingerprint: ${CTEST_SUBSET}"
            CTEST_SUBSET_CMD="-I 0,0,0,${CTEST_SUBSET}"
          else
            echo "No tests changed"
            ret=0
            exit $ret
          fi
        fi
        echo "LD_LIBRARY_PATH=$LD_LIBRARY_PATH"
        CTEST_CMD="ctest -j${KUBERNETES_CPU_REQUEST} ${CTEST_SUBSET_CMD} $ctest_extra --schedule-random --output-on-failure --output-junit xunit.xml"
        echo "+ ${CTEST_CMD}"

        status_file=$(mktemp)
        timeout ${TEST_EXECUTION_TIMEOUT} \
          bash -c "${CTEST_CMD}; echo \$? > ${status_file}" \
          && ret=$(cat ${status_file}) || ret=124

        if [[ $TEST_MODE = "coverage" ]]; then
          common_options="-j${KUBERNETES_CPU_REQUEST} \
            --exclude-unreachable-branches \
            --gcov-ignore-parse-errors=negative_hits.warn_once_per_file \
            --exclude=${CI_PROJECT_DIR}/tests/* \
            --exclude=${CI_PROJECT_DIR}/apps/examples/* \
            --exclude=${CI_PROJECT_DIR}/external/* \
            --exclude=${CI_PROJECT_DIR}/include/srsran/asn1/e1ap/.* \
            --exclude=${CI_PROJECT_DIR}/include/srsran/asn1/e2ap/.* \
            --exclude=${CI_PROJECT_DIR}/include/srsran/asn1/f1ap/.* \
            --exclude=${CI_PROJECT_DIR}/include/srsran/asn1/ngap/.* \
            --exclude=${CI_PROJECT_DIR}/include/srsran/asn1/rrc_nr/.* \
            --exclude=${CI_PROJECT_DIR}/lib/asn1/e1ap/.* \
            --exclude=${CI_PROJECT_DIR}/lib/asn1/e2ap/.* \
            --exclude=${CI_PROJECT_DIR}/lib/asn1/f1ap/.* \
            --exclude=${CI_PROJECT_DIR}/lib/asn1/ngap/.* \
            --exclude=${CI_PROJECT_DIR}/lib/asn1/rrc_nr/.* \
            --exclude-lines-by-pattern \".*srsran_assert.*|.*srsran_sanity_check.*\" \
            --root=${CI_PROJECT_DIR}"

          gcovr $common_options --keep >/dev/null 2>&1
          gcovr $common_options --xml --print-summary --use-gcov-files -o coverage.xml >/dev/null 2>&1

          filesize=$(stat -c%s coverage.xml)
          maxsize=$((10*1204*1024))
          (( filesize > maxsize )) && echo "coverage.xml is greater than 10MB, over gitlab limit" && exit 1
        fi

        if [ $ret -eq 124 ]; then
          echo "The test execution exceeded the maximum allowed time !!!!"
        fi

        exit $ret
      }
    - build_srsgnb
    - launch_tests
  timeout: 6h

.build_artifacts:
  after_script: &build_after_script
    - mv ${CI_PROJECT_DIR}/build/coverage.xml      ${CI_PROJECT_DIR}/${CI_JOB_ID}_coverage.xml            || true
    - |
      mv ${CI_PROJECT_DIR}/build/apps/gnb/gnb /tmp/gnb
      mv ${CI_PROJECT_DIR}/build/apps/cu/srscu /tmp/srscu
      mv ${CI_PROJECT_DIR}/build/apps/du/srsdu /tmp/srsdu
      cd build
      make clean
      mv /tmp/gnb ${CI_PROJECT_DIR}/build/apps/gnb/gnb
      mv /tmp/srscu ${CI_PROJECT_DIR}/build/apps/cu/srscu
      mv /tmp/srsdu ${CI_PROJECT_DIR}/build/apps/du/srsdu
  artifacts: &build_artifacts
    when: always
    reports:
      coverage_report:
        coverage_format: cobertura
        path: ${CI_JOB_ID}_coverage.xml
    paths:
      - ${CI_JOB_ID}_coverage.xml
      - build/
      - build_time_metrics.txt
    expire_in: 10 minutes

# Basic builds (MR and update cache on Nightly)

.smoke release:
  extends: .build_and_unit
  variables:
    OS: ubuntu-24.04
    COMPILER: gcc
    BUILD_TYPE: Release
    ASSERT_LEVEL: PARANOID
    TEST_MODE: coverage
    ENABLE_GCOV: "True"
    MARCH: x86-64-v3
  tags: ["amd64-avx2"]

.smoke relwithdeb:
  extends: .build_and_unit
  variables:
    OS: ubuntu-24.04
    COMPILER: gcc
    BUILD_TYPE: RelWithDebInfo
    ASSERT_LEVEL: PARANOID
    TEST_MODE: default
    MARCH: x86-64-v3
  tags: ["amd64-avx2"]

.smoke tsan:
  extends: .build_and_unit
  variables:
    OS: ubuntu-24.04
    COMPILER: clang
    BUILD_TYPE: Debug
    ASSERT_LEVEL: PARANOID
    ENABLE_TSAN: "True"
    TEST_MODE: tsan
    MARCH: x86-64-v3
  tags: ["amd64-avx2"]

.smoke rhel:
  extends: .build_and_unit
  variables:
    OS: rhel-8
    COMPILER: gcc
    BUILD_TYPE: Release
    ASSERT_LEVEL: PARANOID
    TEST_MODE: default
    MARCH: x86-64-v3
  tags: ["amd64-avx2"]

.smoke archlinux:
  extends: .build_and_unit
  variables:
    OS: archlinux-latest
    ENABLE_WERROR: "False"
    COMPILER: gcc
    BUILD_TYPE: Debug
    ASSERT_LEVEL: PARANOID
    TEST_MODE: default
    MARCH: x86-64-v3
  tags: ["amd64-avx2"]

.smoke dpdk:
  extends: .build_and_unit
  variables:
    OS: ubuntu-24.04
    COMPILER: clang
    BUILD_TYPE: Release
    ENABLE_UHD: "False"
    ENABLE_ZEROMQ: "False"
    ENABLE_DPDK: "True"
    ASSERT_LEVEL: PARANOID
    DPDK_VERSION: "23.11.1_avx2"
    MARCH: x86-64-v3
  tags: ["amd64-avx2"]

.smoke valgrind:
  extends: .build_and_unit
  variables:
    OS: ubuntu-24.04
    COMPILER: gcc
    BUILD_TYPE: Debug
    ASSERT_LEVEL: PARANOID
    TEST_MODE: valgrind
    MARCH: x86-64-v3
  tags: ["amd64-avx2"]

.smoke avx512:
  extends: .build_and_unit
  variables:
    OS: ubuntu-24.04
    COMPILER: gcc
    BUILD_TYPE: Release
    ASSERT_LEVEL: PARANOID
    TEST_MODE: default
    MARCH: x86-64-v4
  tags: ["amd64-avx2-avx512"]

.smoke arm:
  extends: .build_and_unit
  variables:
    OS: ubuntu-24.04
    COMPILER: gcc
    BUILD_TYPE: Release
    ASSERT_LEVEL: PARANOID
    TEST_MODE: default
    MARCH: armv8-a
  tags: ["arm64"]

.smoke arm neon:
  extends: .build_and_unit
  variables:
    OS: ubuntu-24.04
    COMPILER: gcc
    BUILD_TYPE: Release
    ASSERT_LEVEL: PARANOID
    TEST_MODE: default
    MARCH: armv8.2-a+crypto+fp16+dotprod
  tags: ["arm64"]

# Combinations to use in schedules matrix

.combinations: &basic_combinations
  COMPILER: [gcc, clang]
  BUILD_TYPE: [Release, RelWithDebInfo, Debug]
  ASSERT_LEVEL: [MINIMAL, NORMAL, PARANOID]

######
# MR #
######

# Smoke builds in PR: with or without cache

smoke relwithdeb cached:
  extends: .smoke relwithdeb
  timeout: 1 hour
  rules:
    - if: $CI_MERGE_REQUEST_LABELS =~ /no-cache/
      when: never
    - if: $ON_MR
  after_script:
    - *build_after_script
  artifacts:
    <<: *build_artifacts
  cache:
    - *cache_build_get

smoke split 7.2 cached:
  extends: smoke relwithdeb cached
  rules:
    - if: $CI_MERGE_REQUEST_LABELS =~ /no-cache/
      when: never
    - if: $ON_MR
      changes: &split_changes
        paths:
          - apps/units/flexible_du/split_*/**/*
  variables:
    BUILD_ARGS: -DDU_SPLIT_TYPE=SPLIT_7_2
    ENABLE_ZEROMQ:
  after_script: []
  artifacts:

smoke split 8 cached:
  extends: smoke split 7.2 cached
  variables:
    BUILD_ARGS: -DDU_SPLIT_TYPE=SPLIT_8

smoke tsan cached:
  extends: .smoke tsan
  stage: manual
  timeout: 1 hour
  rules:
    - if: $CI_MERGE_REQUEST_LABELS =~ /no-cache/
      when: never
    - if: $ON_MR == "true" && $CI_MERGE_REQUEST_APPROVED == "true"
    - if: $ON_MR
      when: manual
      allow_failure: false
  cache:
    - *cache_build_get

smoke rhel cached:
  extends: .smoke rhel
  stage: manual
  timeout: 1 hour
  rules:
    - if: $CI_MERGE_REQUEST_LABELS =~ /no-cache/
      when: never
    - if: $ON_MR == "true" && $CI_MERGE_REQUEST_APPROVED == "true"
    - if: $ON_MR
      when: manual
      allow_failure: false
  cache:
    - *cache_build_get

smoke archlinux cached:
  extends: .smoke archlinux
  stage: manual
  timeout: 1 hour
  rules:
    - if: $CI_MERGE_REQUEST_LABELS =~ /no-cache/
      when: never
    - if: $ON_MR == "true" && $CI_MERGE_REQUEST_APPROVED == "true"
    - if: $ON_MR
      when: manual
      allow_failure: false
  cache:
    - *cache_build_get

smoke dpdk cached:
  extends: .smoke dpdk
  stage: manual
  timeout: 1 hour
  rules:
    - if: $CI_MERGE_REQUEST_LABELS =~ /no-cache/
      when: never
    - if: $ON_MR == "true" && $CI_MERGE_REQUEST_APPROVED == "true"
    - if: $ON_MR
      when: manual
      allow_failure: false
  cache:
    - *cache_build_get

.infra_path_changes:
  - changes: &instruction_set_changes
      paths:
        - include/srsran/phy/**/*
        - lib/phy/**/*
        - tests/unittests/phy/**/*

smoke avx512 cached:
  extends: .smoke avx512
  stage: manual
  timeout: 1 hour
  rules:
    - if: $CI_MERGE_REQUEST_LABELS =~ /no-cache/
      when: never
    - if: $ON_MR == "true" && $CI_MERGE_REQUEST_APPROVED == "true"
      changes:
        <<: *instruction_set_changes
    - if: $ON_MR
      changes:
        <<: *instruction_set_changes
      when: manual
      allow_failure: false
  cache:
    - *cache_build_get

smoke arm cached:
  extends: .smoke arm
  stage: manual
  timeout: 1 hour
  rules:
    - if: $CI_MERGE_REQUEST_LABELS =~ /no-cache/
      when: never
    - if: $ON_MR == "true" && $CI_MERGE_REQUEST_APPROVED == "true"
      changes:
        <<: *instruction_set_changes
    - if: $ON_MR
      changes:
        <<: *instruction_set_changes
      when: manual
      allow_failure: false
  cache:
    - *cache_build_get

smoke arm neon cached:
  extends: .smoke arm neon
  stage: manual
  timeout: 1 hour
  rules:
    - if: $CI_MERGE_REQUEST_LABELS =~ /no-cache/
      when: never
    - if: $ON_MR == "true" && $CI_MERGE_REQUEST_APPROVED == "true"
      changes:
        <<: *instruction_set_changes
    - if: $ON_MR
      changes:
        <<: *instruction_set_changes
      when: manual
      allow_failure: false
  cache:
    - *cache_build_get

smoke relwithdeb clean:
  extends: .smoke relwithdeb
  rules:
    - if: $CI_MERGE_REQUEST_LABELS =~ /no-cache/
  after_script:
    - *build_after_script
  artifacts:
    <<: *build_artifacts

smoke split 7.2 clean:
  extends: smoke relwithdeb clean
  rules:
    - if: $CI_MERGE_REQUEST_LABELS =~ /no-cache/
      changes:
        <<: *split_changes
  variables:
    BUILD_ARGS: -DDU_SPLIT_TYPE=SPLIT_7_2
    ENABLE_ZEROMQ:
  after_script: []
  artifacts:

smoke split 8 clean:
  extends: smoke split 7.2 clean
  variables:
    BUILD_ARGS: -DDU_SPLIT_TYPE=SPLIT_8

smoke tsan clean:
  extends: .smoke tsan
  rules:
    - if: $CI_MERGE_REQUEST_LABELS =~ /no-cache/

smoke rhel clean:
  extends: .smoke rhel
  rules:
    - if: $CI_MERGE_REQUEST_LABELS =~ /no-cache/

smoke archlinux clean:
  extends: .smoke archlinux
  rules:
    - if: $CI_MERGE_REQUEST_LABELS =~ /no-cache/

smoke dpdk clean:
  extends: .smoke dpdk
  rules:
    - if: $CI_MERGE_REQUEST_LABELS =~ /no-cache/

smoke avx512 clean:
  extends: .smoke avx512
  rules:
    - if: $CI_MERGE_REQUEST_LABELS =~ /no-cache/
      changes:
        <<: *instruction_set_changes

smoke arm clean:
  extends: .smoke arm
  rules:
    - if: $CI_MERGE_REQUEST_LABELS =~ /no-cache/
      changes:
        <<: *instruction_set_changes

smoke arm neon clean:
  extends: .smoke arm neon
  rules:
    - if: $CI_MERGE_REQUEST_LABELS =~ /no-cache/
      changes:
        <<: *instruction_set_changes

# Intermediate commits

intermediate commits cached:
  extends: .smoke release
  rules:
    - if: $CI_MERGE_REQUEST_LABELS =~ /no-cache/
      when: never
    - if: $ON_MR
  timeout: 2 hour
  script:
    - *srs_functions
    - git config advice.detachedHead false
    - git fetch origin --depth=20 $CI_MERGE_REQUEST_TARGET_BRANCH_NAME $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME
    - |
      for rev in $(git rev-list --reverse origin/$CI_MERGE_REQUEST_TARGET_BRANCH_NAME..origin/$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME)
      do
        echo "##################################################"
        echo "#### $rev ####"
        echo "##################################################"
        git checkout $rev
        build_srsgnb
      done
    - launch_tests
  after_script:
    - *build_after_script
  artifacts:
    <<: *build_artifacts
  cache:
    - *cache_build_get

valgrind changed tests:
  extends: .smoke valgrind
  stage: manual
  allow_failure:
    exit_codes: 124 # timeout command's exit code when the time is reached
  rules:
    - if: $CI_MERGE_REQUEST_LABELS =~ /urgent/
      when: never
    - if: $ON_MR == "true" && $CI_MERGE_REQUEST_APPROVED == "true"
    - if: $ON_MR
      when: manual
      allow_failure: true
  variables:
    CLEAN_BUILD: "False"
    FINGERPRINT: "fingerprints.csv"
    TEST_EXECUTION_TIMEOUT: 20m
  script:
    - *srs_functions
    - git config advice.detachedHead false
    - git fetch origin $CI_MERGE_REQUEST_TARGET_BRANCH_NAME $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME --depth 40
    - |
      FORK_POINT=$(git merge-base origin/$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME origin/$CI_MERGE_REQUEST_TARGET_BRANCH_NAME)
      echo "##################################################"
      echo "#### $FORK_POINT ####"
      echo "##################################################"
      git checkout $FORK_POINT
      OUTPUT_FINGERPRINT="${FINGERPRINT}"
      build_srsgnb
      OUTPUT_FINGERPRINT=""
    - |
      echo "##################################################"
      echo "#### origin/$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME ####"
      echo "##################################################"
      git checkout origin/$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME
      build_srsgnb
    - echo "This test execution has a timeout of ${TEST_EXECUTION_TIMEOUT}. If the execution excess that timer, the job will be marked as allowed_to_fail. This will avoid the job to have a huge duration in a MR pipeline."
    - launch_tests
  cache:
    - *cache_build_get

intermediate commits clean:
  extends: intermediate commits cached
  rules:
    - if: $CI_MERGE_REQUEST_LABELS =~ /no-cache/

#################
# Build Nightly #
#################

check builders ubuntu versions:
  extends: .check image exists for all supported ubuntu versions
  stage: static
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly Build Unit Tests/
  variables:
    VERSIONS_TO_IGNORE: "20.04"
  script:
    - check_if_image_exists ${CR_REGISTRY_URI}/srsgnb/builder-ubuntu- :${DOCKER_BUILDER_VERSION}

# Update cache for MR jobs

smoke release update cache:
  extends: .smoke release
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly Build Unit Tests/
      when: delayed
      start_in: 30 minutes
  retry: 2
  interruptible: false
  after_script:
    - *build_after_script
  cache:
    - *cache_build_set
  artifacts:
    <<: *build_artifacts
    expire_in: 3 day

smoke relwithdeb update cache:
  extends: .smoke relwithdeb
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly Build Unit Tests/
      when: delayed
      start_in: 30 minutes
  retry: 2
  interruptible: false
  cache:
    - *cache_build_set

smoke tsan update cache:
  extends: .smoke tsan
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly Build Unit Tests/
      when: delayed
      start_in: 30 minutes
  interruptible: false
  retry: 2
  cache:
    - *cache_build_set

smoke rhel update cache:
  extends: .smoke rhel
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly Build Unit Tests/
      when: delayed
      start_in: 30 minutes
  retry: 2
  interruptible: false
  cache:
    - *cache_build_set

smoke archlinux update cache:
  extends: .smoke archlinux
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly Build Unit Tests/
      when: delayed
      start_in: 30 minutes
  retry: 2
  interruptible: false
  cache:
    - *cache_build_set

smoke dpdk update cache:
  extends: .smoke dpdk
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly Build Unit Tests/
      when: delayed
      start_in: 30 minutes
  retry: 2
  interruptible: false
  cache:
    - *cache_build_set

smoke valgrind update cache:
  extends: .smoke valgrind
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly Build Unit Tests/
      when: delayed
      start_in: 30 minutes
  interruptible: false
  retry: 2
  cache:
    - *cache_build_set

smoke avx512 update cache:
  extends: .smoke avx512
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly Build Unit Tests/
      when: delayed
      start_in: 30 minutes
  interruptible: false
  retry: 2
  cache:
    - *cache_build_set

smoke arm update cache:
  extends: .smoke arm
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly Build Unit Tests/
      when: delayed
      start_in: 30 minutes
  retry: 2
  interruptible: false
  cache:
    - *cache_build_set

smoke arm neon update cache:
  extends: .smoke arm neon
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly Build Unit Tests/
      when: delayed
      start_in: 30 minutes
  retry: 2
  interruptible: false
  cache:
    - *cache_build_set

smoke asan:
  extends: .build_and_unit
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly Build Unit Tests/
      when: delayed
      start_in: 30 minutes
  retry: 2
  interruptible: false
  variables:
    OS: ubuntu-24.04
    COMPILER: clang
    BUILD_TYPE: Debug
    ASSERT_LEVEL: PARANOID
    ENABLE_ASAN: "True"
    TEST_MODE: asan
    MARCH: x86-64-v3
  tags: ["amd64-avx2"]

# Packaging

package:
  extends: .deb-package
  stage: build and unit tests
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly Build Unit Tests/
      when: delayed
      start_in: 30 minutes
  variables: &package_variables
    PROJECT_NAME: srsran-project
    RELEASE_VERSION: "99.9"
    KUBERNETES_CPU_REQUEST: 6
    KUBERNETES_CPU_LIMIT: 6
    KUBERNETES_MEMORY_REQUEST: 12Gi
    KUBERNETES_MEMORY_LIMIT: 12Gi
    DEB_BUILD_OPTIONS: parallel=${KUBERNETES_CPU_LIMIT}
    MAKEFLAGS: -j${KUBERNETES_CPU_LIMIT}
    extraopts: -DMARCH=x86-64-v3
  tags: ["amd64-avx2"]
  parallel:
    matrix:
      - OS_VERSION: "22.04"
      - OS_VERSION: "23.10"
      - OS_VERSION: "24.04"
      - OS_VERSION: "24.10"
  needs: []

install-package:
  extends: .deb-install
  stage: build and unit tests
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly Build Unit Tests/
  variables:
    PROJECT_NAME: srsran-project
    RELEASE_VERSION: "99.9"
  tags: ["amd64-avx2"]
  script:
    - gnb --version
  parallel:
    matrix:
      - OS_VERSION: "22.04"
      - OS_VERSION: "23.10"
      - OS_VERSION: "24.04"
      - OS_VERSION: "24.10"
  needs:
    - package

check package ubuntu versions:
  extends: .check packaging ubuntu images
  stage: static
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly Build Unit Tests/

# Validate export on, enabled for test vector generation

export on amd64:
  extends: .build_and_unit
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly Build Unit Tests/
      when: delayed
      start_in: 60 minutes
  interruptible: false
  variables:
    COMPILER: gcc
    TEST_MODE: none
    ENABLE_EXPORT: "True"
  tags: ["amd64-avx2"]
  parallel:
    matrix:
      - OS: [ubuntu-24.10, ubuntu-24.04, ubuntu-23.10, ubuntu-22.04]
      - OS: [ubuntu-24.10, ubuntu-24.04, ubuntu-23.10, ubuntu-22.04]
        MARCH: x86-64-v3

export on amd64 avx512:
  extends: export on amd64
  tags: ["amd64-avx2-avx512"]
  parallel:
    matrix:
      - OS: [ubuntu-24.10, ubuntu-24.04, ubuntu-23.10, ubuntu-22.04]
        MARCH: x86-64-v4

# Build + unit tests combinations

ubuntu-24.10 amd64 avx2:
  extends: .build_and_unit
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly Build Unit Tests/
      when: delayed
      start_in: 210 minutes
  interruptible: false
  tags: ["amd64-avx2"]
  parallel:
    matrix:
      - OS: ubuntu-24.10
        <<: *basic_combinations
        MARCH: x86-64-v3

ubuntu-24.04 amd64 avx2:
  extends: .build_and_unit
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly Build Unit Tests/
      when: delayed
      start_in: 120 minutes
  interruptible: false
  tags: ["amd64-avx2"]
  parallel:
    matrix:
      - OS: ubuntu-24.04
        <<: *basic_combinations
        MARCH: x86-64-v3

ubuntu-24.04 amd64 avx512:
  extends: .build_and_unit
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly Build Unit Tests/
      when: delayed
      start_in: 120 minutes
  interruptible: false
  tags: ["amd64-avx2-avx512"]
  parallel:
    matrix:
      - OS: ubuntu-24.04
        <<: *basic_combinations
        MARCH: x86-64-v4

ubuntu-23.10 amd64 avx2:
  extends: .build_and_unit
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly Build Unit Tests/
      when: delayed
      start_in: 150 minutes
  interruptible: false
  tags: ["amd64-avx2"]
  parallel:
    matrix:
      - OS: ubuntu-23.10
        <<: *basic_combinations
        MARCH: x86-64-v3

ubuntu-23.10 amd64 avx512:
  extends: .build_and_unit
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly Build Unit Tests/
      when: delayed
      start_in: 150 minutes
  interruptible: false
  tags: ["amd64-avx2-avx512"]
  parallel:
    matrix:
      - OS: ubuntu-23.10
        <<: *basic_combinations
        MARCH: x86-64-v4

ubuntu-22.04 amd64 avx2:
  extends: .build_and_unit
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly Build Unit Tests/
      when: delayed
      start_in: 180 minutes
  interruptible: false
  tags: ["amd64-avx2"]
  parallel:
    matrix:
      - OS: ubuntu-22.04
        <<: *basic_combinations
        MARCH: x86-64-v3

rhel-8 amd64 avx2:
  extends: .build_and_unit
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly Build Unit Tests/
      when: delayed
      start_in: 240 minutes
  interruptible: false
  tags: ["amd64-avx2"]
  parallel:
    matrix:
      - OS: rhel-8
        <<: *basic_combinations
        MARCH: x86-64-v3

# Basic ARM NO_ISA / NEON

ubuntu-24.04 arm neon:
  extends: .build_and_unit
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly Build Unit Tests/
      when: delayed
      start_in: 60 minutes
  interruptible: false
  tags: ["arm64"]
  parallel:
    matrix:
      - OS: ubuntu-24.04
        <<: *basic_combinations
        MARCH: armv8.2-a+crypto+fp16+dotprod

ubuntu-23.10 arm neon:
  extends: .build_and_unit
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly Build Unit Tests/
      when: delayed
      start_in: 90 minutes
  interruptible: false
  tags: ["arm64"]
  parallel:
    matrix:
      - OS: ubuntu-23.10
        <<: *basic_combinations
        MARCH: armv8.2-a+crypto+fp16+dotprod

# Basic DPDK

ubuntu dpdk:
  extends: .build_and_unit
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly Build Unit Tests/
      when: delayed
      start_in: 90 minutes
  interruptible: false
  variables:
    ENABLE_UHD: "False"
    ENABLE_ZEROMQ: "False"
    ENABLE_DPDK: "True"
    ASSERT_LEVEL: PARANOID
    MARCH: x86-64-v3
  tags: ["amd64-avx2"]
  parallel:
    matrix:
      - OS: ubuntu-24.10
        COMPILER: [gcc, clang]
        DPDK_VERSION: ["23.11.1_avx2"]
      - OS: ubuntu-24.04
        COMPILER: [gcc, clang]
        DPDK_VERSION: ["23.11.1_avx2"]
      - OS: ubuntu-23.10
        COMPILER: [gcc, clang]
        DPDK_VERSION: ["22.11.6_avx2", "23.11.1_avx2"]
      - OS: ubuntu-22.04
        COMPILER: [gcc, clang]
        DPDK_VERSION: ["22.11.6_avx2", "23.11.1_avx2"]

###################
# Alternative OSs #
###################
archlinux amd64 native:
  extends: .build_and_unit
  rules:
    - if: $CI_DESCRIPTION =~ /Alternative OSs/
  interruptible: false
  tags: ["amd64"]
  parallel:
    matrix:
      - OS: archlinux-latest
        ENABLE_WERROR: "False"
        <<: *basic_combinations

archlinux amd64 avx2:
  extends: .build_and_unit
  rules:
    - if: $CI_DESCRIPTION =~ /Alternative OSs/
      when: delayed
      start_in: 30 minutes
  interruptible: false
  tags: ["amd64-avx2"]
  parallel:
    matrix:
      - OS: archlinux-latest
        ENABLE_WERROR: "False"
        <<: *basic_combinations
        MARCH: x86-64-v3

archlinux amd64 avx512:
  extends: .build_and_unit
  rules:
    - if: $CI_DESCRIPTION =~ /Alternative OSs/
  interruptible: false
  tags: ["amd64-avx2-avx512"]
  parallel:
    matrix:
      - OS: archlinux-latest
        ENABLE_WERROR: "False"
        <<: *basic_combinations
        MARCH: x86-64-v4

debian 12 amd64 native:
  extends: .build_and_unit
  rules:
    - if: $CI_DESCRIPTION =~ /Alternative OSs/
      when: delayed
      start_in: 60 minutes
  interruptible: false
  tags: ["amd64"]
  parallel:
    matrix:
      - OS: debian-12
        ENABLE_WERROR: "False"
        <<: *basic_combinations

debian 12 amd64 avx2:
  extends: .build_and_unit
  rules:
    - if: $CI_DESCRIPTION =~ /Alternative OSs/
      when: delayed
      start_in: 90 minutes
  interruptible: false
  tags: ["amd64-avx2"]
  parallel:
    matrix:
      - OS: debian-12
        ENABLE_WERROR: "False"
        <<: *basic_combinations
        MARCH: x86-64-v3

debian 12 amd64 avx512:
  extends: .build_and_unit
  rules:
    - if: $CI_DESCRIPTION =~ /Alternative OSs/
      when: delayed
      start_in: 30 minutes
  interruptible: false
  tags: ["amd64-avx2-avx512"]
  parallel:
    matrix:
      - OS: debian-12
        ENABLE_WERROR: "False"
        <<: *basic_combinations
        MARCH: x86-64-v4

##########
# Weekly #
##########

# Sanitizers

.weekly sanitizers:
  extends: .build_and_unit
  rules:
    - if: $CI_DESCRIPTION =~ /Weekly/
  interruptible: false
  variables:
    ASSERT_LEVEL: PARANOID
    BUILD_TYPE: Debug
  parallel:
    matrix:
      # ubuntu-22.04 disabled due to https://github.com/google/sanitizers/issues/1259#issuecomment-642312392
      - OS: [ubuntu-24.10, ubuntu-24.04, ubuntu-23.10]
        SANITIZER: tsan
        COMPILER: [gcc, clang]
        ENABLE_TSAN: "True"
        TEST_MODE: default
      - OS: [ubuntu-22.04]
        SANITIZER: asan
        COMPILER: [gcc, clang]
        ENABLE_ASAN: "True"
        TEST_MODE: default
      - OS: [ubuntu-24.10, ubuntu-24.04, ubuntu-23.10]
        SANITIZER: asan
        COMPILER: clang
        ENABLE_ASAN: "True"
        TEST_MODE: default
      - OS: [ubuntu-24.10, ubuntu-24.04]
        SANITIZER: valgrind
        COMPILER: gcc
        TEST_MODE: valgrind

sanitizers amd64 native:
  extends: .weekly sanitizers
  tags: ["amd64"]
  parallel:
    matrix:
      # ubuntu-22.04 disabled due to https://github.com/google/sanitizers/issues/1259#issuecomment-642312392
      - OS: [ubuntu-24.10, ubuntu-24.04, ubuntu-23.10]
        SANITIZER: tsan
        COMPILER: [gcc, clang]
        ENABLE_TSAN: "True"
        TEST_MODE: default
      - OS: [ubuntu-22.04]
        SANITIZER: asan
        COMPILER: [gcc, clang]
        ENABLE_ASAN: "True"
        TEST_MODE: default
      - OS: [ubuntu-24.10, ubuntu-24.04, ubuntu-23.10]
        SANITIZER: asan
        COMPILER: clang
        ENABLE_ASAN: "True"
        TEST_MODE: default
      # Valgrind doesn't support AVX512 instruction set

sanitizers amd64 avx2:
  extends: .weekly sanitizers
  variables:
    MARCH: x86-64-v3
  tags: ["amd64-avx2"]
  parallel:
    matrix:
      # ubuntu-22.04 disabled due to https://github.com/google/sanitizers/issues/1259#issuecomment-642312392
      - OS: [ubuntu-24.10, ubuntu-24.04, ubuntu-23.10]
        SANITIZER: tsan
        COMPILER: [gcc, clang]
        ENABLE_TSAN: "True"
        TEST_MODE: default
      - OS: ubuntu-22.04
        SANITIZER: asan
        COMPILER: [gcc, clang]
        ENABLE_ASAN: "True"
        TEST_MODE: default
      - OS: [ubuntu-24.10, ubuntu-24.04, ubuntu-23.10]
        SANITIZER: asan
        COMPILER: clang
        ENABLE_ASAN: "True"
        TEST_MODE: default
      - OS: [ubuntu-24.10, ubuntu-24.04]
        SANITIZER: valgrind
        COMPILER: gcc
        TEST_MODE: valgrind

sanitizers amd64 avx512:
  extends: .weekly sanitizers
  variables:
    MARCH: x86-64-v4
  tags: ["amd64-avx2-avx512"]
  parallel:
    matrix:
      # ubuntu-22.04 disabled due to https://github.com/google/sanitizers/issues/1259#issuecomment-642312392
      - OS: [ubuntu-24.10, ubuntu-24.04, ubuntu-23.10]
        SANITIZER: tsan
        COMPILER: [gcc, clang]
        ENABLE_TSAN: "True"
        TEST_MODE: default
      - OS: ubuntu-22.04
        SANITIZER: asan
        COMPILER: [gcc, clang]
        ENABLE_ASAN: "True"
        TEST_MODE: default
      - OS: [ubuntu-24.10, ubuntu-24.04, ubuntu-23.10]
        SANITIZER: asan
        COMPILER: clang
        ENABLE_ASAN: "True"
        TEST_MODE: default
      # Valgrind doesn't support AVX512 instruction set

sanitizers arm native:
  extends: .weekly sanitizers
  tags: ["arm64"]

sanitizers arm neon:
  extends: .weekly sanitizers
  variables:
    MARCH: armv8.2-a+crypto+fp16+dotprod
  tags: ["arm64"]

# UHD Alternatives

build uhd alt:
  extends: .build_and_unit
  rules:
    - if: $CI_DESCRIPTION =~ /Weekly/
  interruptible: false
  variables:
    TEST_MODE: none
    ASSERT_LEVEL: PARANOID
    MARCH: x86-64-v3
  tags: ["amd64-avx2"]
  parallel:
    matrix:
      - OS: ubuntu-24.10
        COMPILER: [gcc, clang]
        UHD_VERSION: ["4.7.0.0"]
      - OS: ubuntu-24.04
        COMPILER: [gcc, clang]
        UHD_VERSION: ["4.7.0.0", "4.6.0.0"]
      - OS: ubuntu-23.10
        COMPILER: [gcc, clang]
        UHD_VERSION: ["4.7.0.0", "4.6.0.0", "4.4.0.0"]
      - OS: ubuntu-22.04
        COMPILER: [gcc, clang]
        UHD_VERSION: ["4.7.0.0", "4.6.0.0", "4.4.0.0", "4.3.0.0", "4.1.0.5"]

# Build + unit tests combinations

ubuntu-24.10 amd64 native:
  extends: .build_and_unit
  rules:
    - if: $CI_DESCRIPTION =~ /Weekly/
      when: delayed
      start_in: 90 minutes
  interruptible: false
  tags: ["amd64"]
  parallel:
    matrix:
      - OS: ubuntu-24.10
        <<: *basic_combinations

ubuntu-24.10 amd64 avx512:
  extends: .build_and_unit
  rules:
    - if: $CI_DESCRIPTION =~ /Weekly/
      when: delayed
      start_in: 90 minutes
  interruptible: false
  tags: ["amd64-avx2-avx512"]
  parallel:
    matrix:
      - OS: ubuntu-24.10
        <<: *basic_combinations
        MARCH: x86-64-v4

ubuntu-24.10 arm native:
  extends: .build_and_unit
  rules:
    - if: $CI_DESCRIPTION =~ /Weekly/
      when: delayed
      start_in: 90 minutes
  interruptible: false
  tags: ["arm64"]
  parallel:
    matrix:
      - OS: ubuntu-24.10
        <<: *basic_combinations

ubuntu-24.10 arm neon:
  extends: .build_and_unit
  rules:
    - if: $CI_DESCRIPTION =~ /Weekly/
      when: delayed
      start_in: 90 minutes
  interruptible: false
  tags: ["arm64"]
  parallel:
    matrix:
      - OS: ubuntu-24.10
        <<: *basic_combinations
        MARCH: armv8.2-a+crypto+fp16+dotprod

ubuntu-24.04 amd64 native:
  extends: .build_and_unit
  rules:
    - if: $CI_DESCRIPTION =~ /Weekly/
      when: delayed
      start_in: 30 minutes
  interruptible: false
  tags: ["amd64"]
  parallel:
    matrix:
      - OS: ubuntu-24.04
        <<: *basic_combinations

ubuntu-24.04 arm native:
  extends: .build_and_unit
  rules:
    - if: $CI_DESCRIPTION =~ /Weekly/
      when: delayed
      start_in: 30 minutes
  interruptible: false
  tags: ["arm64"]
  parallel:
    matrix:
      - OS: ubuntu-24.04
        <<: *basic_combinations

ubuntu-23.10 amd64 native:
  extends: .build_and_unit
  rules:
    - if: $CI_DESCRIPTION =~ /Weekly/
      when: delayed
      start_in: 30 minutes
  interruptible: false
  tags: ["amd64"]
  parallel:
    matrix:
      - OS: ubuntu-23.10
        <<: *basic_combinations

ubuntu-23.10 arm native:
  extends: .build_and_unit
  rules:
    - if: $CI_DESCRIPTION =~ /Weekly/
      when: delayed
      start_in: 30 minutes
  interruptible: false
  tags: ["arm64"]
  parallel:
    matrix:
      - OS: ubuntu-23.10
        <<: *basic_combinations

ubuntu-22.04 amd64 native:
  extends: .build_and_unit
  rules:
    - if: $CI_DESCRIPTION =~ /Weekly/
      when: delayed
      start_in: 60 minutes
  interruptible: false
  tags: ["amd64"]
  parallel:
    matrix:
      - OS: ubuntu-22.04
        <<: *basic_combinations

ubuntu-22.04 amd64 avx512:
  extends: .build_and_unit
  rules:
    - if: $CI_DESCRIPTION =~ /Weekly/
      when: delayed
      start_in: 60 minutes
  interruptible: false
  tags: ["amd64-avx2-avx512"]
  parallel:
    matrix:
      - OS: ubuntu-22.04
        <<: *basic_combinations
        MARCH: x86-64-v4

ubuntu-22.04 arm native:
  extends: .build_and_unit
  rules:
    - if: $CI_DESCRIPTION =~ /Weekly/
      when: delayed
      start_in: 60 minutes
  interruptible: false
  tags: ["arm64"]
  parallel:
    matrix:
      - OS: ubuntu-22.04
        <<: *basic_combinations

ubuntu-22.04 arm neon:
  extends: .build_and_unit
  rules:
    - if: $CI_DESCRIPTION =~ /Weekly/
      when: delayed
      start_in: 60 minutes
  interruptible: false
  tags: ["arm64"]
  parallel:
    matrix:
      - OS: ubuntu-22.04
        <<: *basic_combinations
        MARCH: armv8.2-a+crypto+fp16+dotprod

rhel-8 amd64 native:
  extends: .build_and_unit
  rules:
    - if: $CI_DESCRIPTION =~ /Weekly/
      when: delayed
      start_in: 120 minutes
  interruptible: false
  tags: ["amd64"]
  parallel:
    matrix:
      - OS: rhel-8
        <<: *basic_combinations

rhel-8 amd64 avx512:
  extends: .build_and_unit
  rules:
    - if: $CI_DESCRIPTION =~ /Weekly/
      when: delayed
      start_in: 120 minutes
  interruptible: false
  tags: ["amd64-avx2-avx512"]
  parallel:
    matrix:
      - OS: rhel-8
        <<: *basic_combinations
        MARCH: x86-64-v4

rhel-8 arm native:
  extends: .build_and_unit
  rules:
    - if: $CI_DESCRIPTION =~ /Weekly/
      when: delayed
      start_in: 120 minutes
  interruptible: false
  tags: ["arm64"]
  parallel:
    matrix:
      - OS: rhel-8
        <<: *basic_combinations

rhel-8 arm neon:
  extends: .build_and_unit
  rules:
    - if: $CI_DESCRIPTION =~ /Weekly/
      when: delayed
      start_in: 120 minutes
  interruptible: false
  tags: ["arm64"]
  parallel:
    matrix:
      - OS: rhel-8
        <<: *basic_combinations
        MARCH: armv8.2-a+crypto+fp16+dotprod

# DPDK

.dpdk_combinations: &basic_combinations_dpdk
  <<: *basic_combinations
  ENABLE_UHD: "False"
  ENABLE_ZEROMQ: "False"
  ENABLE_DPDK: "True"
  COMPILER: [gcc, clang]

ubuntu-22.04 amd64 avx2 dpdk:
  extends: .build_and_unit
  rules:
    - if: $CI_DESCRIPTION =~ /Weekly/
      when: delayed
      start_in: 240 minutes
  interruptible: false
  tags: ["amd64-avx2"]
  parallel:
    matrix:
      - OS: ubuntu-22.04
        <<: *basic_combinations_dpdk
        DPDK_VERSION: ["22.11.6_avx2", "23.11.1_avx2"]
        MARCH: x86-64-v3

ubuntu-22.04 amd64 avx512 dpdk:
  extends: .build_and_unit
  rules:
    - if: $CI_DESCRIPTION =~ /Weekly/
      when: delayed
      start_in: 270 minutes
  interruptible: false
  tags: ["amd64-avx2-avx512"]
  parallel:
    matrix:
      - OS: ubuntu-22.04
        <<: *basic_combinations_dpdk
        DPDK_VERSION: ["22.11.6_avx512", "23.11.1_avx512"]
        MARCH: x86-64-v4

ubuntu-23.10 amd64 avx2 dpdk:
  extends: .build_and_unit
  rules:
    - if: $CI_DESCRIPTION =~ /Weekly/
      when: delayed
      start_in: 300 minutes
  interruptible: false
  tags: ["amd64-avx2"]
  parallel:
    matrix:
      - OS: ubuntu-23.10
        <<: *basic_combinations_dpdk
        DPDK_VERSION: ["22.11.6_avx2", "23.11.1_avx2"]
        MARCH: x86-64-v3

ubuntu-23.10 amd64 avx512 dpdk:
  extends: .build_and_unit
  rules:
    - if: $CI_DESCRIPTION =~ /Weekly/
      when: delayed
      start_in: 330 minutes
  interruptible: false
  tags: ["amd64-avx2-avx512"]
  parallel:
    matrix:
      - OS: ubuntu-23.10
        <<: *basic_combinations_dpdk
        DPDK_VERSION: ["22.11.6_avx512", "23.11.1_avx512"]
        MARCH: x86-64-v4

ubuntu-24.04 amd64 avx2 dpdk:
  extends: .build_and_unit
  rules:
    - if: $CI_DESCRIPTION =~ /Weekly/
      when: delayed
      start_in: 360 minutes
  interruptible: false
  tags: ["amd64-avx2"]
  parallel:
    matrix:
      - OS: ubuntu-24.04
        <<: *basic_combinations_dpdk
        DPDK_VERSION: "23.11.1_avx2"
        MARCH: x86-64-v3

ubuntu-24.04 amd64 avx512 dpdk:
  extends: .build_and_unit
  rules:
    - if: $CI_DESCRIPTION =~ /Weekly/
      when: delayed
      start_in: 390 minutes
  interruptible: false
  tags: ["amd64-avx2-avx512"]
  parallel:
    matrix:
      - OS: ubuntu-24.04
        <<: *basic_combinations_dpdk
        DPDK_VERSION: "23.11.1_avx512"
        MARCH: x86-64-v4

ubuntu-24.10 amd64 avx2 dpdk:
  extends: .build_and_unit
  rules:
    - if: $CI_DESCRIPTION =~ /Weekly/
      when: delayed
      start_in: 420 minutes
  interruptible: false
  tags: ["amd64-avx2"]
  parallel:
    matrix:
      - OS: ubuntu-24.10
        <<: *basic_combinations_dpdk
        DPDK_VERSION: "23.11.1_avx2"
        MARCH: x86-64-v3

ubuntu-24.10 amd64 avx512 dpdk:
  extends: .build_and_unit
  rules:
    - if: $CI_DESCRIPTION =~ /Weekly/
      when: delayed
      start_in: 450 minutes
  interruptible: false
  tags: ["amd64-avx2-avx512"]
  parallel:
    matrix:
      - OS: ubuntu-24.10
        <<: *basic_combinations_dpdk
        DPDK_VERSION: "23.11.1_avx512"
        MARCH: x86-64-v4

#############
# Run check #
#############

check-affinity-manager-nocpu:
  image: ${CR_REGISTRY_URI}/srsgnb/builder-ubuntu-24.04:${DOCKER_BUILDER_VERSION}
  tags: ["amd64"]
  stage: build and unit tests
  needs:
    - job: "smoke release update cache"
      artifacts: true
    - job: builder version
      optional: false
      artifacts: true
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly Build Unit Tests/
  timeout: 15 minutes
  script:
    - cd build/apps/gnb
    - |
      error_found=false
      for (( i=3; i<=10; i++ ))
      do
          echo "Checking for number of CPU = $((i-2))"
          output=$(taskset -c 2-$i bash -c "./gnb log --filename=stdout" 2>&1 || true)
          echo "$output"

          if [[ "$output" == *"nof_cores_for_non_prio_threads"* ]]; then
              error_found=true
              echo "**********************************************************************************"
              echo $output
              echo "**********************************************************************************"
              echo "Error for number of CPU = $((i-2))"
              echo -e "\n\n\n\n\n"
          fi
      done

      if [ "$error_found" = true ]; then
          exit 1
      fi

###############
# E2E Nightly #
###############
basic relwithdeb:
  extends: .smoke relwithdeb
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly E2E Tests/
  retry: 2
  interruptible: false
  variables:
    TEST_MODE: none
  after_script:
    - *build_after_script
  artifacts:
    <<: *build_artifacts
    expire_in: 3 day

basic package:
  extends: .deb-package
  stage: build and unit tests
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly E2E Tests/
  retry: 2
  interruptible: false
  variables:
    <<: *package_variables
    OS_VERSION: "24.04"
  tags: ["amd64-avx2"]
  needs: []

basic tsan:
  extends: .smoke tsan
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly E2E Tests/
  retry: 2
  interruptible: false
  variables:
    TEST_MODE: none
  after_script:
    - *build_after_script
  artifacts:
    <<: *build_artifacts
    expire_in: 3 day

basic asan:
  extends: smoke asan
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly E2E Tests/
  retry: 2
  interruptible: false
  variables:
    TEST_MODE: none
    MARCH: x86-64-v3
    BUILD_ARGS: -DEXIT_TIMEOUT=60
  tags: ["amd64-avx2"]
  after_script:
    - *build_after_script
  artifacts:
    <<: *build_artifacts
    expire_in: 3 day

basic memcheck:
  extends: .smoke valgrind
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly E2E Tests/
  retry: 2
  interruptible: false
  variables:
    TEST_MODE: none
  after_script:
    - *build_after_script
  artifacts:
    <<: *build_artifacts
    expire_in: 3 day

basic avx512 dpdk:
  extends: .build_and_unit
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly E2E Tests/
    - if: $CI_DESCRIPTION =~ /Weekly/
  retry: 2
  interruptible: false
  variables:
    OS: ubuntu-24.04
    COMPILER: gcc
    BUILD_TYPE: Release
    TEST_MODE: none
    ENABLE_UHD: "False"
    ENABLE_ZEROMQ: "False"
    ENABLE_DPDK: "True"
    DPDK_VERSION: "23.11.1_avx512"
    MARCH: x86-64-v4
    FORCE_DEBUG_INFO: "True"
    ASSERT_LEVEL: AUTO
  tags: ["amd64-avx2-avx512"]
  after_script:
    - *build_after_script
  artifacts:
    <<: *build_artifacts
    expire_in: 3 day

basic avx512 dpdk withassert:
  extends: basic avx512 dpdk
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly E2E Tests/
  variables:
    ASSERT_LEVEL: PARANOID

#######
# Web #
#######
custom build:
  extends: .build_and_unit
  rules:
    - if: $ON_WEB
    - if: $ON_API
  interruptible: false # Web jobs are standalone
  variables:
    ENABLE_ZEROMQ: ""
  tags: ["${INFRASTRUCTURE_TAG}"]
  after_script:
    - *build_after_script
  artifacts:
    <<: *build_artifacts
    expire_in: 4 hours
  cache:
    - *cache_build_get
