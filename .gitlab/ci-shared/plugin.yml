include:
  - project: softwareradiosystems/ci/tools
    ref: "20"
    file: .gitlab/ci-shared/setup/all.yml
  - project: softwareradiosystems/ci/tools
    ref: "20"
    file: .gitlab/ci-shared/features/all.yml
  - local: .gitlab/ci-shared/e2e.yml
  - local: .gitlab/ci-shared/build.yml
  - local: .gitlab/ci/builders/version.yml

variables:
  # CI
  SLACK_CHANNEL_OK: "#ci_gnb"
  SLACK_CHANNEL_FAIL: "#ci_gnb"
  SLACK_CHANNEL_INFO_MSG: "#ci_gnb_verbose"
  # srsRAN references
  SRSRANDIR: &srsran_dir ${CI_PROJECT_DIR}/srsgnb
  SRSRAN_REPO_URL: https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.com/softwareradiosystems/srsgnb.git

  INFRASTRUCTURE_TAG:
    description: Computer architecture and supported instruction sets
    options:
      - amd64
      - amd64-avx2
      - amd64-avx2-avx512
      - arm64
    value: "amd64-avx2"
  OS:
    description: Operating system
    options:
      - "ubuntu-24.10"
      - "ubuntu-24.04"
      - "ubuntu-23.10"
      - "ubuntu-22.04"
      - "debian-12"
      - "debian-11"
      - "archlinux-latest"
      - "rhel-8"
    value: "ubuntu-24.04"
  COMPILER:
    description: Compiler to use
    options:
      - "gcc"
      - "clang"
    value: "gcc"
  BUILD_ARGS:
    description: It will be passed to cmake
    value: ""
  MAKE_ARGS:
    description: It will be passed to make
    value: ""
  UHD_VERSION:
    description: must be one version supported in the specified OS
    value: ""
  DPDK_VERSION:
    description: must be one version supported in the specified OS
    value: ""

######
# CI #
######
is using latest:
  image: ubuntu:24.04
  stage: ci
  rules:
    - if: $ON_MR
  script:
    - DEBIAN_FRONTEND=noninteractive apt-get update && apt-get install -y --no-install-recommends git git-lfs apt-transport-https ca-certificates && git lfs install
    - mkdir -p ${SRSRANDIR}
    - git clone --depth 1 ${SRSRAN_REPO_URL} ${SRSRANDIR}
    - cd ${SRSRANDIR}
    - SRSRAN_LATEST_COMMIT=$(git rev-parse HEAD)
    - COMMIT_USED_IN_PIPELINE=$(git rev-parse $SRSRAN_COMMIT)
    - |
      if [[ $COMMIT_USED_IN_PIPELINE != $SRSRAN_LATEST_COMMIT ]]; then
        echo "Please update to latest srsRAN commit: $SRSRAN_LATEST_COMMIT"
        exit 1
      fi
  allow_failure: true

download srsran:
  image: ubuntu:22.04
  stage: ci
  rules:
    - if: $ON_MR
    - if: $ON_WEB
    - if: $ON_API
    - if: $ON_SCHEDULE
    - if: $CI_DESCRIPTION
  script:
    - DEBIAN_FRONTEND=noninteractive apt-get update && apt-get install -y --no-install-recommends git git-lfs apt-transport-https ca-certificates && git lfs install
    - |
      mkdir -p ${SRSRANDIR}
      cd ${SRSRANDIR}
    - |
      git init
      git remote add origin ${SRSRAN_REPO_URL}
      git fetch --depth=1 origin ${SRSRAN_COMMIT}
      git reset --hard FETCH_HEAD
    - git config --global --add safe.directory ${SRSRANDIR}
  artifacts:
    paths:
      - $SRSRANDIR
  needs: []

builder version:
  extends: .builder version
  rules:
    - if: $ON_MR
    - if: $ON_WEB
    - if: $ON_API
    - if: $ON_SCHEDULE
    - if: $CI_DESCRIPTION
  variables:
    SRSRANDIR: *srsran_dir
  needs:
    - job: download srsran

load retina variables:
  extends: .load retina variables
  rules:
    - if: $ON_MR
    - if: $ON_WEB
    - if: $ON_API
    - if: $ON_SCHEDULE
    - if: $CI_DESCRIPTION
  variables:
    SRSRANDIR: *srsran_dir
  needs:
    - job: download srsran

##################
# Build template #
##################
.cache_set:
  cache:
    - key: ${OS}-${COMPILER}-${BUILD_ARGS}
      paths:
        - ${CI_PROJECT_DIR}/ccache
        - ${SRSRANDIR}/ccache
      policy: push

.cache_get:
  cache:
    - key: ${OS}-${COMPILER}-${BUILD_ARGS}
      paths:
        - ${CI_PROJECT_DIR}/ccache
        - ${SRSRANDIR}/ccache
      policy: pull-push

.build_and_unit:
  extends: .build_and_unit_template
  after_script:
    - mv ${CI_PROJECT_DIR}/build/coverage.xml      ${CI_PROJECT_DIR}/${CI_JOB_ID}_coverage.xml            || true
    - |
      mv ${SRSRANDIR}/build/apps/gnb/gnb  /tmp/gnb
      mv ${SRSRANDIR}/build/apps/cu/srscu /tmp/srscu
      mv ${SRSRANDIR}/build/apps/du/srsdu /tmp/srsdu
      cd ${SRSRANDIR}/build
      make clean
      mv /tmp/gnb   ${SRSRANDIR}/build/apps/gnb/gnb
      mv /tmp/srscu ${SRSRANDIR}/build/apps/cu/srscu
      mv /tmp/srsdu ${SRSRANDIR}/build/apps/du/srsdu
  artifacts:
    when: always
    reports:
      coverage_report:
        coverage_format: cobertura
        path: ${CI_JOB_ID}_coverage.xml
    paths:
      - ${CI_JOB_ID}_coverage.xml
      - ${SRSRANDIR}/build/
  timeout: 1h
  needs:
    - job: download srsran
    - job: builder version

########################
# Codechecker template #
########################
.codechecker:
  extends: .build_and_unit
  image: ${CR_REGISTRY_URI}/srsgnb/codechecker:${DOCKER_BUILDER_VERSION}
  stage: static
  variables:
    ANALYZER: ""
    ANALYZER_ARGS: ""
    ARTIFACT_EXTRA_PATH: ""
    CHECK_PER_FILE_TIMEOUT: 600
    COMPILER: clang
  before_script:
    - |
      export CC=/usr/bin/clang
      export CXX=/usr/bin/clang++
    - |
      cd ${SRSRANDIR}
      mkdir -p build
      cd build || exit
    - cmake -DENABLE_EXPORT=ON -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DBUILD_TESTS=False ..
    - make -j${KUBERNETES_CPU_LIMIT} srsran_exported_libs
    - |
      echo "
      -/usr/lib
      -*tests/unittests
      -*tests/integrationtests
      -*tests/benchmarks
      -*benchmarks
      -*apps/examples
      -*external" >/tmp/codechecker_skip
    - |
      cd ${CI_PROJECT_DIR}
      mkdir -p build
      cd build || exit
    - cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DBUILD_TESTS=False -DSRSRAN_PATH=${SRSRANDIR} ..
    - |
      monitor_child_process() {
          while true; do
              ps -eo comm,pid,etimes | grep ${ANALYZER} | while read comm pid etimes; do
                  if [ $etimes -gt $CHECK_PER_FILE_TIMEOUT ]; then
                      echo "Killing child analysis process"
                      kill $pid
                  fi
              done
              sleep 30
          done
      }
      export -f monitor_child_process
  script:
    - nohup bash -c monitor_child_process &
    - static-analyzer.sh -i /tmp/codechecker_skip --jobs ${KUBERNETES_CPU_REQUEST} --analyzers ${ANALYZER} ${ANALYZER_ARGS} $CI_PROJECT_DIR
  after_script:
    - mv codechecker_html codechecker-${ANALYZER}-html
  artifacts:
    reports:
      codequality: code-quality-report.json
    paths:
      - codechecker-${ANALYZER}-html${ARTIFACT_EXTRA_PATH}
    when: always
    expire_in: 1 day
  cache: []

################
# E2E template #
################
.e2e-run:
  extends: .e2e-run-template
  stage: e2e
  variables:
    SRSRANDIR: *srsran_dir
  needs:
    - job: download srsran
    - job: load retina variables
