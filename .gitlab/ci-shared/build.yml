variables:
  INFRASTRUCTURE_TAG:
    description: Computer architecture and supported instruction sets
    options:
      - amd64
      - amd64-avx2
      - amd64-avx2-avx512
      - arm64
      - on-prem-amd64
      - on-prem-arm64
      - aws-spot-amd64
      - aws-spot-arm64
    value: "amd64-avx2"
  OS:
    description: Operating system
    options:
      - "ubuntu-24.10"
      - "ubuntu-24.04"
      - "ubuntu-23.10"
      - "ubuntu-22.04"
      - "debian-12"
      - "debian-11"
      - "archlinux-latest"
      - "rhel-8"
    value: "ubuntu-24.04"
  COMPILER:
    description: Compiler to use
    options:
      - "gcc"
      - "clang"
    value: "gcc"
  BUILD_ARGS:
    description: It will be passed to cmake
    value: ""
  MAKE_ARGS:
    description: It will be passed to make
    value: ""
  UHD_VERSION:
    description: must be one version supported in the specified OS
    value: ""
  DPDK_VERSION:
    description: must be one version supported in the specified OS
    value: ""

.build_and_unit_template:
  image: ${CR_REGISTRY_URI}/srsgnb/builder-${OS}:${DOCKER_BUILDER_VERSION}
  variables:
    # TEST
    TEST_EXECUTION_TIMEOUT: 0
    # CI
    KUBERNETES_CPU_REQUEST: 6
    KUBERNETES_CPU_LIMIT: 6
    KUBERNETES_MEMORY_REQUEST: 12Gi
    KUBERNETES_MEMORY_LIMIT: 12Gi
  tags:
    - ${INFRASTRUCTURE_TAG}
  before_script:
    - |
      BUILD_CMD="${BUILD_ARGS}"
      if [ -n "${DPDK_VERSION}" ]; then
        BUILD_CMD="-d ${DPDK_VERSION} ${BUILD_CMD}"
        export LD_LIBRARY_PATH=/opt/dpdk/${DPDK_VERSION}/lib/x86_64-linux-gnu/:/opt/dpdk/${DPDK_VERSION}/lib/aarch64-linux-gnu/:${LD_LIBRARY_PATH}
      fi
      if [ -n "${UHD_VERSION}" ]; then
        BUILD_CMD="-u ${UHD_VERSION} ${BUILD_CMD}"
        export LD_LIBRARY_PATH=/opt/uhd/${UHD_VERSION}/lib:${LD_LIBRARY_PATH}
      fi
      if [ -n "${COMPILER}" ]; then
        BUILD_CMD="-c ${COMPILER} ${BUILD_CMD}"
      fi
    - |
      build_srsran() {
        target="$1"
        shift
        set -x
        builder.sh -m "-j${KUBERNETES_CPU_REQUEST} ${target}" ${BUILD_CMD} "$@" ${SRSRANDIR}
        { set +x; } 2>/dev/null
      }
    - |
      build_plugin() {
        target="$1"
        shift      
        set -x
        builder.sh -m "-j${KUBERNETES_CPU_REQUEST} ${target}" ${BUILD_CMD} "$@" ${CI_PROJECT_DIR}
        { set +x; } 2>/dev/null
      }
    - |
      launch_tests_srsran() {
        cd ${SRSRANDIR}/build
        echo "LD_LIBRARY_PATH=$LD_LIBRARY_PATH"
        set -x
        ctest -j${KUBERNETES_CPU_REQUEST} --schedule-random --output-on-failure --output-junit xunit.xml "$@"
        { set +x; } 2>/dev/null
      }
    - |
      launch_tests_plugin() {
        cd ${CI_PROJECT_DIR}/build
        echo "LD_LIBRARY_PATH=$LD_LIBRARY_PATH"
        set -x
        ctest -j${KUBERNETES_CPU_REQUEST} --schedule-random --output-on-failure --output-junit xunit.xml "$@"
        { set +x; } 2>/dev/null
      }
